<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Label6.Text" xml:space="preserve">
    <value>Na barra de menu, no topo da aplicação se encontram as abas de Arquivo, Manual e Desenvolvimento. Ao clicar em Arquivo aparecem os botões Limpar, Salvar, Carregar, Excluir e Sair, onde respectivamente temos as ações de limpeza dos dados, salvamento dos dados das tabelas, carregamento de dados da tabela, exclusão de dados da tabela e sair a aplicação. Na aba Manual contém o manual do usuário e na aba Desenvolvimento contêm informações e contatos da equipe desenvolvedora da ONG Instituto ECCUS e código fonte no GitHub.
 
Observação: Os dados serão salvos sempre no caminho "C:\ECCUS_Dados" e os nomes dos arquivos serão "DadosTB_dimensionamento.txt" e "DadosTB_Orcamento.txt". Caso seu dispositivo não tenha o local "C:" poderão ocorrer erros na aplicação.
</value>
  </data>
  <data name="Label4.Text" xml:space="preserve">
    <value>Nessa parte serão feitas as análises dos possíveis dimensionamentos e precificações dos mesmos. As dimensões obtidas na aba dimensionamento serão postas automaticamente na respectiva tabela que se encontra na aba de análise, após o usuário clicar no botão “Calcular”.
A obtenção do custo total da bacia será feita a partir da adição dos serviços, ferramentas ou itens, adicionados em sua respectiva área ("Dados da tabela de orçamento"). Ao clicar no botão “Adicionar” os dados serão postos na tabela de orçamento e nela pode deletar uma linha selecionada da tabela ou obter o custo total clicando no respectivo botão.
</value>
  </data>
  <data name="Label1.Text" xml:space="preserve">
    <value>Inicialmente é necessário adicionar ao software os dados de entrada, selecionando o padrão de ocupação, colocando a temperatura do ambiente, tempo entre limpeza da bacia, quantidade de pessoas atendidas e os dados do pneu que será usado conforme imagem exemplo. Dessa forma ao clicar no botão "Calcular" os resultados serão exibidos, volume útil, largura da bacia, comprimento da bacia, profundidade da bacia e quantidade de pneus usados.
Ao clicar o botão “Calcular”, além da obtenção dos dados de saída, os mesmos são exportados simultaneamente para a tabela de dimensionamento que se encontra na aba análise.
</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>O presente projeto tomou como base a norma técnica da ABNT NBR 7229 - Projeto, construção e operação de sistemas de tanque sépticos. Elaborado pelo corpo técnico da ONG Instituto ECCUS, de João Pessoa-PB, o projeto se baseou no estudo “implantação do sistema de tratamento de esgoto, através de bacia de evapotranspiração na comunidade de Santa Luzia na Ilha do Baixio” e a partir de um projeto anterior onde constam os cálculos para o tratamento de efluentes e captação de águas pluviais para residência unifamiliar e seu Memorial descritivo. 
Através da NT ABNT NBR 7229, conseguimos obter o volume útil do tanque séptico e considerando cada pneu como um cilindro, obtemos o volume de cada pneu. Dividindo o volume útil pelo volume de cada pneu temos o número de pneus que serão utilizados (arredondando para o inteiro mais próximo). Para calcular o comprimento da bacia foram multiplicados a quantidade de pneus e largura de cada pneu. Assim, a largura da bacia é obtida fazendo o diâmetro do pneu mais 1.0 m. Para a profundidade três condições foram consideradas: para volume útil menor ou igual a 6 m³ a profundidade adotada será 1.2 m, para volume útil maior que 6 m³ e menor igual a 10 m³, a profundidade será 1.5 m, e para volumes maiores a profundidade será 1.8 m. Esse padrão foi adotado no sentido de manter a temperatura no centro da bacia sempre elevada.
É importante pontuar que, para obtenção do volume útil, a NBR 7229 tem como padrão as seguintes contribuições de esgoto: escolas = 50 L/habitante*dia, alojamento provisório = 80 L/habitante*dia, hotel (exceto, lavanderia e cozinha) = 100 L/habitante*dia e para residência temos 100, 130 e 160 L/habitante*dia. No entanto, a fim de diminuir o comprimento da bacia e destacando que a mesma só recebe águas negras, foi adotada uma contribuição de 36 L/habitante*dia, para residência, correspondendo a contribuição exclusiva da bacia sanitária.  Esse valor foi baseado no trabalho de DIAS, que apresentou um Estudo da viabilidade técnica, econômica e social do aproveitamento de água de chuva em residências na cidade de João Pessoa, conforme tabelas 5.2, 5.3 e 5.4, onde constam o consumo de água por pessoa, em bacia sanitária.
</value>
  </data>
  <data name="label9.Text" xml:space="preserve">
    <value>Referências:
RIO DE JANEIRO. Associação Brasileira de Normas Técnicas. NBR 7229. Projeto, construção e operação de sistemas de tanque sépticos. 1993
PAULO R. COSTA; MARIO F. COELHO. Implantação de sistema de tratamento de esgoto, através de bacia de evapotranspiração na comunidade de Santa Luzia na Ilha do Baixio, Iranduba/AM. Centro Universitário do Norte. 2018
ONG INSTITUTO ECCUS. Memorial descritivo e de cálculo do projeto de tratamento de efluentes e captação de águas pluviais para residência unifamiliar. João Pessoa, PB. 2020
ISABELLY C. DIAS. Dissertação de Mestrado. Estudo da viabilidade técnica, econômica e social do aproveitamento de água de chuva em residências na cidade de João Pessoa. Universidade Federal da Paraíba. Programa De Pós-Graduação em Engenharia Urbana. 2007
</value>
  </data>
</root>